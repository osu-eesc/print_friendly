<?php

/**
 * Implements hook_permission()
**/
function print_friendly_permission() {
  return array(
    'administer print friendly' => array(
       'title' => t('Administer print friendly settings'),
       'description' => t('Perform administrative tasks for the print friendly module'),
    ),
  );
}


/**
 * Implements hook_menu()
**/
function print_friendly_menu() {
  $items['admin/config/print-friendly'] = array(
    'title' => 'Print friendly administration',
    'description' => 'Administrative settings page for the print friendly module',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer print friendly'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_friendly_admin_page'),
  );
  return $items;
}


/**
 * Builds the admin page form for the print friendly module
**/
function print_friendly_admin_page($form, &$form_state) {

  $all_views = views_get_all_views();
  $page_views = array();
  foreach ($all_views as $view_name => $view) {
    foreach ($view->display as $display) {
      if ($display->display_plugin == 'page') {
        $page_views[$view_name] = !empty($view->human_name) ? $view->human_name : $view_name;
      }
    }
  }
  asort($page_views);

  $form['excluded_pages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Excluded Pages'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['excluded_pages']['print_friendly_excluded_content_types'] = array(
    '#type' => 'checkboxes',
    '#options' => node_type_get_names(),
    '#default_value' => variable_get('print_friendly_excluded_content_types', array()),
    '#title' => t('Content Types'),
  );
  $form['excluded_pages']['print_friendly_exclude_webform_results'] = array(
    '#type' => 'checkboxes',
    '#options' => array('webform-submissions' => t('Webform Submissions')),
    '#default_value' => variable_get('print_friendly_exclude_webform_results', FALSE),
    '#title' => t('Webform Submissions'),
  );
  $form['excluded_pages']['print_friendly_excluded_views'] = array(
    '#type' => 'checkboxes',
    '#options' => $page_views,
    '#default_value' => variable_get('print_friendly_excluded_views', array()),
    '#title' => t('Views'),
  );
  $form['footer'] = array(
    '#type' => 'fieldset',
    '#title' => t('Footer content'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );



  // $fields = field_info_instances('node');
  return system_settings_form($form);
}


/**
 * Implements hook_views_post_execute
**/
function print_friendly_views_post_execute(&$view) {
  $excluded_views = variable_get('print_friendly_excluded_views', array());
  if ($view->current_display == 'page' && !in_array($view->name, $excluded_views, TRUE)) {
    $view->attachment_after = l(t('Print-friendly version'), '#', array('attributes' => array('title' => t('Show a printer-friendly version of this page'))));
  }
}


/**
 * Implements hook_webform_submission_render_alter
**/
function print_friendly_webform_submission_render_alter(&$submission) {
  $print_friendly_ebabled = variable_get('print_friendly_exclude_webform_results', FALSE);
  if (!$print_friendly_ebabled) {
    if ($submission['#format'] == 'html') {
      $max_weight = 0;
      foreach ($submission as $submission_part) {
        if (is_array($submission_part) && isset($submission_part['#weight'])) {
          if ($submission_part['#weight'] > $max_weight) {
            $max_weight = $submission_part['#weight'];
          }
        }
      }
      $submission['print_link'] = array(
        '#markup' => l(t('Print-friendly version'), '#', array('attributes' => array('title' => t('Show a printer-friendly version of this page')))),
        '#weight' => $max_weight + 1,
      );
    }
  }
}


/**
 * Implements hook_theme_registry_alter()
**/
function print_friendly_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'print_friendly');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _print_friendly_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _print_friendly_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}


/**
 * Implements hook_node_view()
**/
function print_friendly_node_view($node, $view_mode, $langcode) {
  $disabled_types = array();
  $print_friendly_excluded_content_types = variable_get('print_friendly_excluded_content_types', array());
  if (arg(2) !== 'print' && !in_array($node->type, $print_friendly_excluded_content_types, TRUE)) {
    $node->content['links']['print_friendly_links'] = array(
      '#theme' => 'links_node_print_friendly',
      '#links' => array(
        'print_friendly' => array(
          'title' => t('Print-friendly version'),
          'href' => 'node/' . $node->nid . '/print',
          'attributes' => array(
            'title' => t('Show a printer-friendly version of this page'),
          ),
        ),
      ),
      '#attributes' => array(
        'class' => array(
          'links',
          'inline',
        ),
      ),
    );
  }

  if (isset($node->content['links']['book']['#links']['book_printer']) && $node->book['depth'] = '1' && $node->book['has_children']) {
    $node->content['links']['book']['#links']['book_printer']['title'] = 'Print entire book';
  }
  else {
    unset($node->content['links']['book']['#links']['book_printer']);
  }
}


/**
 * Implements hook_theme()
**/
function print_friendly_theme() {
  return array(
    'book_navigation' => array(
      'arguments' => array('book_link' => NULL),
      'template' => 'theme/book-navigation',
    ),
    'book_export_html' => array(
      'arguments' => array('title' => NULL, 'contents' => NULL, 'depth' => NULL),
      'template' => 'theme/book-export-html',
    ),
  );
}
